
# 3번
from collections import deque
def search(n,a,b, parent, pass_ele):
    count=1
    for i in range(len(a)):
        if b[i]==parent and a[i]!=pass_ele:
            q=deque([i])
            while q:
                new_parent_idx=q.popleft()
                count+=1
                for j in range(len(a)):
                    if b[j]==a[new_parent_idx]:
                        if a[j] == b[new_parent_idx]:
                            count+=min(search(n,a,b,a[j],b[j]), search(n,a,b,b[j],a[j]))
                        else:
                            q.append(j)
    return count
    
def tasks(n, a, b):
    result=n
    checked=[False]*(100001)
    for i in range(len(a)):
        if checked[a[i]]==False and (b[i] in a) and a[i] == b[a.index(b[i])]:
            result-=min(search(n,a,b,a[i],b[i]), search(n,a,b,b[i],a[i]))
            checked[a[i]]=True
            checked[b[i]]=True
    return result
n=10
a=[1,2,3,4,5,6,7,8,9]
b=[8,10,4,9,1,3,5,9,4]
print(tasks(n,a,b))

#5번
from collections import deque
dx=[-1, 0, 1, 0]
dy=[0, 1, 0, -1]
def bfs(grid, i, j, visited_grid):
    n=len(grid)
    
    q=deque([(i, j)])
    result=[(i, j)]
    visited_grid[i][j]=True
    while q:
        now=q.popleft()
        for i in range(4):
            nx=now[0]+dx[i]
            ny=now[1]+dy[i]
            if nx<0 or nx>=n or ny<0 or ny>=n:
                continue
            if grid[nx][ny]=='1' and (not visited_grid[nx][ny]):
                result.append((nx, ny))
                q.append((nx, ny))
                visited_grid[nx][ny]=True
    result.sort()
    return tuple(result)
                    
def countMatches(grid1, grid2):
    # Write your code here
    n=len(grid1)
    visited_grid1=[[False]*(n) for _ in range(n)]
    visited_grid2=[[False]*(n) for _ in range(n)]
    
    grid1_group_set=set()
    grid2_group_set=set()
    
    for i in range(len(grid1)):
        for j in range(len(grid1[i])):
            if grid1[i][j]=='1' and visited_grid1[i][j]==False:
                grid1_group_set.add(bfs(grid1, i, j, visited_grid1))
            if grid2[i][j]=='1' and visited_grid1[i][j]==False:
                grid2_group_set.add(bfs(grid2, i, j, visited_grid2))
    return len(grid1_group_set.intersection(grid2_group_set))
grid1=['001','011','100']

grid2=['001','011','101']
print(countMatches(grid1, grid2))